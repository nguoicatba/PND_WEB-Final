@model PND_WEB.Models.Quotation

@{
    ViewData["Title"] = "Edit";

    bool isReadOnly = Model.Qsatus == "Hoàn thành" || Model.Qsatus == "Đã hủy";
    var staffAttr = isReadOnly
        ? new Dictionary<string, object> { { "class", "form-control" }}
        : new Dictionary<string, object> { { "class", "form-control" }};
    var commonAttr = isReadOnly
        ? new Dictionary<string, object> { { "class", "form-control" } }
        : new Dictionary<string, object> { { "class", "form-control" } };
    var dateAttr = isReadOnly
        ? new Dictionary<string, object> { { "class", "form-control" }, { "type", "datetime-local" } }
        : new Dictionary<string, object> { { "class", "form-control" }, { "type", "datetime-local" } };
}

<div class="row">
    <div class="col">
        <div class="card card-default">
            <div class="card-header"><b>EDIT QUOTATIONS: @Model.QuotationId</b></div>
            <div class="card-body">
                <form asp-action="AdminViewEdit">
                    <div asp-validation-summary="ModelOnly" class="text-danger"></div>
                    <input type="hidden" asp-for="QuotationId" />
                    <div class="form-row">
                        <div class="form-group col-4">
                            <label asp-for="Qsatus" class="control-label"></label>
                            @if (isReadOnly)
                            {
                                @Html.DropDownListFor(model => model.Qsatus, (IEnumerable<SelectListItem>)ViewBag.QsatusList,
                                         new { @class = "form-control"})
                                @Html.HiddenFor(model => model.Qsatus)
                            }
                            else
                            {
                                @Html.DropDownListFor(model => model.Qsatus, (IEnumerable<SelectListItem>)ViewBag.QsatusList,
                                         new { @class = "form-control" })
                            }
                            <span asp-validation-for="Qsatus" class="text-danger"></span>
                        </div>
                        <div class="form-group col-4">
                            <label asp-for="StaffName" class="control-label"></label>
                            @Html.TextBoxFor(model => model.StaffName, staffAttr)
                            <span asp-validation-for="StaffName" class="text-danger"></span>
                        </div>
                        <div class="form-group col-4">
                            <label asp-for="Contact" class="control-label"></label>
                            @Html.TextBoxFor(model => model.Contact, staffAttr)
                            <span asp-validation-for="Contact" class="text-danger"></span>
                        </div>
                    </div>
                    <div class="form-row">
                        <div class="form-group col-3">
                            <label asp-for="Qdate" class="control-label"></label>
                            @Html.TextBoxFor(model => model.Qdate, dateAttr)
                            <span asp-validation-for="Qdate" class="text-danger"></span>
                        </div>
                        <div class="form-group col-3">
                            <div id="autocomplete-wrapper" style="position: relative;">
                                <label asp-for="CusTo" class="control-label"></label>
                                @Html.TextBoxFor(model => model.CusTo, isReadOnly
                                         ? new Dictionary<string, object> {
                                { "class", "form-control" },
                                }
                                         : new Dictionary<string, object> {
                                { "class", "form-control" },
                                { "id", "custos" }
                                })
                                <span asp-validation-for="CusTo" class="text-danger"></span>
                            </div>
                        </div>
                        <div class="form-group col-3">
                            <label asp-for="CusContact" class="control-label"></label>
                            @Html.TextBoxFor(model => model.CusContact, isReadOnly
                                     ? new Dictionary<string, object> {
                            { "class", "form-control" },
                            }
                                     : new Dictionary<string, object> {
                            { "class", "form-control" },
                            { "id", "cuscontacts" }
                            })
                            <span asp-validation-for="CusContact" class="text-danger"></span>
                        </div>
                        <div class="form-group col-3">
                            <label asp-for="Valid" class="control-label"></label>
                            @Html.TextBoxFor(model => model.Valid, dateAttr)
                            <span asp-validation-for="Valid" class="text-danger"></span>
                        </div>
                    </div>
                    <div class="form-row">
                        <div class="form-group col-4">
                            <label asp-for="Term" class="control-label"></label>
                            @Html.TextBoxFor(model => model.Term, commonAttr)
                            <span asp-validation-for="Term" class="text-danger"></span>
                        </div>
                        <div class="form-group col-4">
                            <label asp-for="Vol" class="control-label"></label>
                            @Html.TextBoxFor(model => model.Vol, commonAttr)
                            <span asp-validation-for="Vol" class="text-danger"></span>
                        </div>
                        <div class="form-grou col-4">
                            <label asp-for="Commodity" class="control-label"></label>
                            @Html.TextBoxFor(model => model.Commodity, commonAttr)
                            <span asp-validation-for="Commodity" class="text-danger"></span>
                        </div>
                    </div>
                    <div class="form-row">
                        <div class="form-group col-4">
                            <div id="autocomplete-wrapper" style="position: relative;">
                                <label asp-for="Pol" class="control-label"></label>
                                @Html.TextBoxFor(model => model.Pol, isReadOnly
                                         ? new Dictionary<string, object> {
                                { "class", "form-control" },
                                }
                                         : new Dictionary<string, object> {
                                { "class", "form-control" },
                                { "id", "pols" }
                                })
                                <span asp-validation-for="Pol" class="text-danger"></span>
                            </div>
                        </div>
                        <div class="form-group col-4">
                            <div id="autocomplete-wrapper" style="position: relative;">
                                <label asp-for="Adds" class="control-label"></label>
                                @Html.TextBoxFor(model => model.Adds, isReadOnly
                                         ? new Dictionary<string, object> {
                                { "class", "form-control" },
                                }
                                         : new Dictionary<string, object> {
                                { "class", "form-control" },
                                { "id", "add" }
                                })
                                <span asp-validation-for="Adds" class="text-danger"></span>
                            </div>
                        </div>
                        <div class="form-group col-4">
                            <div id="autocomplete-wrapper" style="position: relative;">
                                <label asp-for="Pod" class="control-label"></label>
                                @Html.TextBoxFor(model => model.Pod, isReadOnly
                                         ? new Dictionary<string, object> {
                                { "class", "form-control" },
                                }
                                         : new Dictionary<string, object> {
                                { "class", "form-control" },
                                { "id", "pods" }
                                })
                                <span asp-validation-for="Pod" class="text-danger"></span>
                            </div>
                        </div>
                    </div>
                    <div class="form-group">
                        <input type="submit" value="Save" class="btn btn-primary btn-xs" />
                        <a asp-action="AdminView" class="btn btn-info btn-xs">Back to List</a>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }

    <script src="https://ajax.aspnetcdn.com/ajax/jQuery/jquery-1.10.0.min.js" type="text/javascript"></script>
    <script src="https://ajax.aspnetcdn.com/ajax/jquery.ui/1.9.2/jquery-ui.min.js" type="text/javascript"></script>
    <link href="https://ajax.aspnetcdn.com/ajax/jquery.ui/1.9.2/themes/blitzer/jquery-ui.css"
          rel="Stylesheet" type="text/css" />

    <style>
        #autocomplete-wrapper .ui-autocomplete {
            max-height: 200px;
            overflow-y: auto;
            overflow-x: hidden;
            z-index: 1050 !important;
        }
    </style>

    <script type="text/javascript">
        $(function () {
            $("#add").autocomplete({
                source: function (request, response) {
                    $.ajax({
                        url: '/Quotations/AutoCompleteCports/',
                        data: { "prefix": request.term },
                        type: "POST",
                        success: function (data) {
                            response($.map(data, function (item) {
                                return item;
                            }))
                        },
                        error: function (response) {
                            alert(response.responseText);
                        },
                        failure: function (response) {
                            alert(response.responseText);
                        }
                    });
                },
                select: function (e, i) {
                    $("#add").val(i.item.label);
                },
                minLength: 1,
                appendTo: "#autocomplete-wrapper"
            });

            $("#pods").autocomplete({
                source: function (request, response) {
                    $.ajax({
                        url: '/Quotations/AutoCompleteCports/',
                        data: { "prefix": request.term },
                        type: "POST",
                        success: function (data) {
                            response($.map(data, function (item) {
                                return item;
                            }))
                        },
                        error: function (response) {
                            alert(response.responseText);
                        },
                        failure: function (response) {
                            alert(response.responseText);
                        }
                    });
                },
                select: function (e, i) {
                    $("#pods").val(i.item.label);
                },
                minLength: 1,
                appendTo: "#autocomplete-wrapper"
            });

            $("#pols").autocomplete({
                source: function (request, response) {
                    $.ajax({
                        url: '/Quotations/AutoCompleteCports/',
                        data: { "prefix": request.term },
                        type: "POST",
                        success: function (data) {
                            response($.map(data, function (item) {
                                return item;
                            }))
                        },
                        error: function (response) {
                            alert(response.responseText);
                        },
                        failure: function (response) {
                            alert(response.responseText);
                        }
                    });
                },
                select: function (e, i) {
                    $("#pols").val(i.item.label);
                },
                minLength: 1,
                appendTo: "#autocomplete-wrapper"
            });

            $("#custos").autocomplete({
                source: function (request, response) {
                    $.ajax({
                        url: '/Quotations/AutoCompleteCustomers/',
                        data: { "prefix": request.term },
                        type: "POST",
                        success: function (data) {
                            response($.map(data, function (item) {
                                return item;
                            }))
                        },
                        error: function (response) {
                            alert(response.responseText);
                        },
                        failure: function (response) {
                            alert(response.responseText);
                        }
                    });
                },
                select: function (e, i) {
                    $("#custos").val(i.item.label);
                    $("#cuscontacts").val(i.item.label2);
                },
                minLength: 1,
                appendTo: "#autocomplete-wrapper"
            });
        });
    </script>
}